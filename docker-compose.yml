services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: voice_agent_postgres
    environment:
      POSTGRES_DB: voice_agent_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - voice_agent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: voice_agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voice_agent_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: voice_agent_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/voice_agent_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production-12345
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=sk-placeholder-key
      - ELEVENLABS_API_KEY=placeholder-key
      - AWS_ACCESS_KEY_ID=placeholder-access-key
      - AWS_SECRET_ACCESS_KEY=placeholder-secret-key
      - AWS_S3_BUCKET=placeholder-bucket
      - AWS_S3_BUCKET_AUDIO=placeholder-audio-bucket
      - WEBHOOK_SECRET=development-webhook-secret
      - SENTRY_DSN=
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - ALLOWED_HOSTS=*
    ports:
      - "8000:8000"
    # Commented out for production build - uncomment for development
    # volumes:
    #   - ./backend:/app
    #   - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voice_agent_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: voice_agent_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    # Removed volume mounts for production build
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - voice_agent_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MinIO for S3-compatible storage (development)
  minio:
    image: minio/minio
    container_name: voice_agent_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - voice_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: voice_agent_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - voice_agent_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  voice_agent_network:
    driver: bridge